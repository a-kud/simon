{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/pad-start/index.js","source/assets/js/app/simon.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","string","maxLength","fillString","result","String","targetLen","parseInt","isNaN","isFinite","fill","fillLen","truncated","substr","init","settings","gameStatus","on","onoff","endGame","reset","setText","rnd","startBtn","removeEventListener","playRound","strictBtn","cloneNodesAndReplace","addEventListener","sequence","generateSequence","round","computerTurn","arr","promises","forEach","num","push","playSound","audioButtons","then","Promise","resolve","sleep","offBtnLight","colorButtons","userClicks","clickCount","count","resetGame","padStart","computerPromises","console","log","btnClicked","getKeyByValue","target","classList","soundUrl","choise","setRound","correctChoise","strict","executePromisesSeq","incrementR","getRandomInt","alert","colorBtns","document","querySelectorAll","ledBox","querySelector","id","toggleClass","started","concat","_toConsumableArray","btn","startGame","lightBtn","element","add","remove","path","reject","audio","Audio","load","play","onended","onerror","createArray","map","Array","getRandom","Math","random","min","max","floor","duration","setTimeout","object","value","Object","keys","find","key","prom","text","textContent","clones","el","cloneNode","idx","parentNode","replaceChild","_len","arguments","classNames","_key","toggle","sw","0","2","3","getRound","getStatus","gameOn","gameStarted","toggleStatus","gameInProgress","gameEnded","resetRoundAndSequence","undefined","incrementRound","toggleStrict"],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nmodule.exports = function (string, maxLength, fillString) {\n\n  if (string == null || maxLength == null) {\n    return string;\n  }\n\n  var result    = String(string);\n  var targetLen = typeof maxLength === 'number'\n    ? maxLength\n    : parseInt(maxLength, 10);\n\n  if (isNaN(targetLen) || !isFinite(targetLen)) {\n    return result;\n  }\n\n\n  var length = result.length;\n  if (length >= targetLen) {\n    return result;\n  }\n\n\n  var fill = fillString == null ? '' : String(fillString);\n  if (fill === '') {\n    fill = ' ';\n  }\n\n\n  var fillLen = targetLen - length;\n\n  while (fill.length < fillLen) {\n    fill += fill;\n  }\n\n  var truncated = fill.length > fillLen ? fill.substr(0, fillLen) : fill;\n\n  return truncated + result;\n};\n","\"use strict\";\r\nlet padStart = require('pad-start');\r\n\r\nlet startBtn = document.querySelector(\"#start\"),\r\n    strictBtn = document.querySelector(\"#strict\"),\r\n    sw = document.querySelector(\".toggle--checkbox\"),\r\n    rnd = document.querySelector(\"#round\");\r\n\r\nlet colorButtons = {\r\n    0: \"red\",\r\n    1: \"blue\",\r\n    2: \"green\",\r\n    3: \"yellow\"\r\n},\r\n    audioButtons = {\r\n        0: \"assets/sound/simonSound1.mp3\",\r\n        1: \"assets/sound/simonSound2.mp3\",\r\n        2: \"assets/sound/simonSound3.mp3\",\r\n        3: \"assets/sound/simonSound4.mp3\"\r\n    };\r\n\r\nlet settings = function() {\r\n    let round = 1,\r\n        gameOn = false,\r\n        gameStarted = false,\r\n        strict = false;\r\n\r\n\tfunction getRound() {\r\n\t\treturn round;\r\n\t}\r\n\r\n    function getStatus() {\r\n        return {on: gameOn, started: gameStarted, strict: strict};\r\n    }\r\n\r\n    function toggleStatus() {\r\n        if (!gameOn) {\r\n            gameOn = true;\r\n        } else {\r\n            gameOn = false;\r\n        }\r\n    }\r\n\r\n    function gameInProgress() {\r\n        gameStarted = true;\r\n    }\r\n\r\n    function gameEnded() {\r\n        gameStarted = false;\r\n    }\r\n\r\n\tfunction resetRoundAndSequence() {\r\n\t\tround = 1;\r\n        sequence = undefined;\r\n\t}\r\n\r\n\tfunction incrementRound() {\r\n\t\tround += 1;\r\n\t}\r\n\r\n    function toggleStrict() {\r\n        strict ? strict = false : strict = true\r\n    }\r\n\r\n\treturn {\r\n\t\tround: getRound,\r\n\t\treset: resetRoundAndSequence,\r\n\t\tincrementR: incrementRound,\r\n        gameStatus: getStatus,\r\n        onoff: toggleStatus,\r\n        strict: toggleStrict,\r\n        startGame: gameInProgress,\r\n        endGame: gameEnded\r\n\t};\r\n}();\r\n\r\nlet sequence;\r\n\r\nsw.addEventListener(\"click\", function swtichToggled() {\r\n    init();\r\n});\r\n\r\n/**\r\n * Initiates game start/stop\r\n */\r\nfunction init() {\r\n    if ( !settings.gameStatus().on ) {\r\n        settings.onoff();\r\n        setText(rnd, \"ON\");\r\n        startBtn.addEventListener( \"click\", playRound);\r\n        strictBtn.addEventListener( \"click\", playRound);\r\n        sequence = generateSequence(settings.round())\r\n    } else {\r\n        settings.onoff();\r\n        settings.endGame();\r\n        settings.reset();\r\n        setText(rnd, \"\");\r\n        startBtn.removeEventListener( \"click\", playRound );\r\n        strictBtn.removeEventListener( \"click\", playRound );\r\n        cloneNodesAndReplace();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Lights up color buttons in random order\r\n */\r\nfunction playRound(e) {\r\n\r\n    /**\r\n     * @returns {Array.<Object>} - Array of functions to be executed\r\n     */\r\n    function computerTurn(arr) {\r\n        let promises = [];\r\n\r\n        arr.forEach( (num) => {\r\n            promises.push(function() {\r\n                    return playSound(audioButtons[num], num)\r\n                                .then( () => {\r\n                                    return Promise.resolve(sleep(1000).then(offBtnLight(colorButtons[num])));\r\n                                });\r\n\r\n                });\r\n        });\r\n\r\n        return promises;\r\n    }\r\n\r\n    /**\r\n     * Manages game according to user's input\r\n     */\r\n    function userClicks(e) {\r\n        console.log(\"sequence in userClicks: \", sequence);\r\n\r\n        function clickCount() {\r\n            count += 1;\r\n            return count;\r\n        }\r\n\r\n        function resetGame() {\r\n            settings.reset();\r\n            setText(rnd, padStart( settings.round(), 2, \"0\" ));\r\n            sequence = generateSequence(settings.round());\r\n            computerPromises = computerTurn(sequence);\r\n        }\r\n\r\n        clickCount();\r\n\r\n        let btnClicked = getKeyByValue(colorButtons, e.target.classList[0]),\r\n            soundUrl = audioButtons[btnClicked];\r\n        let choise = (sequence[count] == btnClicked);\r\n        let setRound = () => setText(rnd, padStart(settings.round(), 2, \"0\"));\r\n\r\n        if (!choise) {\r\n            setText(rnd, \"ER\");\r\n            count = -1;\r\n            correctChoise = 0;\r\n            if (settings.gameStatus().strict) {\r\n                resetGame();\r\n            }\r\n            playSound(soundUrl, btnClicked)\r\n                .then( () => { return Promise.resolve(sleep(1000)\r\n                    .then(offBtnLight( colorButtons[btnClicked] )))\r\n                             })\r\n                .then( () => { executePromisesSeq( computerPromises); })\r\n                .then( () => { setRound(); });\r\n        }\r\n        else if(choise) {\r\n            correctChoise += 1;\r\n            playSound(soundUrl, btnClicked)\r\n                .then( () => { return Promise.resolve(sleep(1000)\r\n                    .then(offBtnLight(colorButtons[btnClicked])))\r\n                })\r\n        }\r\n        if (correctChoise == settings.round()) {\r\n            settings.incrementR();\r\n            count = -1;\r\n            correctChoise = 0;\r\n            sequence.push(getRandomInt(0, 4))\r\n            computerPromises = computerTurn(sequence);\r\n            sleep(1500).then( () => { setRound();} )\r\n                .then( () => { executePromisesSeq(computerPromises); } )\r\n        }\r\n        if (settings.round() == 21) {\r\n\r\n            alert(\"Lucky you! It's a win.\");\r\n            resetGame();\r\n        }\r\n    }\r\n\r\n    let count = -1;\r\n    let correctChoise = 0;\r\n\r\n    let computerPromises;\r\n\r\n    let colorBtns = document.querySelectorAll(\".color-btn\"),\r\n        ledBox = document.querySelector(\".led-box\");\r\n\r\n    setText(rnd, padStart( settings.round(), 2, \"0\" ));\r\n    if (e.target.id == \"strict\") {\r\n        if (!settings.gameStatus().strict) {\r\n            settings.strict();\r\n            toggleClass(ledBox, \"led-box-on\");\r\n        }\r\n    } else {\r\n        if (settings.gameStatus().strict) {\r\n            settings.strict();\r\n            toggleClass(ledBox, \"led-box-on\");\r\n        }\r\n    }\r\n\r\n    if ( !settings.gameStatus().started ) {\r\n        computerPromises = computerTurn(sequence);\r\n    } else {\r\n        settings.reset();\r\n        setText(rnd, padStart( settings.round(), 2, \"0\" ));\r\n        sequence = generateSequence(settings.round());\r\n        computerPromises = computerTurn(sequence);\r\n        [...colorBtns].forEach( (btn) => btn.removeEventListener(\"click\", userClicks) );\r\n    }\r\n\r\n    executePromisesSeq(computerPromises).then( () => {\r\n        if (!settings.gameStatus().started) {\r\n            [...colorBtns].forEach( (btn) => btn.addEventListener(\"click\", userClicks) );\r\n            settings.startGame();\r\n        }\r\n    } );\r\n}\r\n\r\n/**\r\n * Changes backround of color button to idicate activated button\r\n * @param {String} btn - Class name\r\n */\r\nfunction lightBtn(btn) {\r\n    let element = document.querySelector(\".\" + btn)\r\n    element.classList.add(\"activated-\" + btn);\r\n}\r\n\r\n/**\r\n * Changes backround of color button to idicate deactivated button\r\n * @param {String} btn - Class name\r\n */\r\nfunction offBtnLight(btn) {\r\n    let element = document.querySelector(\".\" + btn)\r\n    element.classList.remove(\"activated-\" + btn);\r\n}\r\n\r\n/**\r\n * Plays specified audiofile and lights button\r\n * @param {String} path - Path to the file\r\n */\r\nfunction playSound(path, num) {\r\n    return new Promise(function (resolve, reject) {\r\n        let audio = new Audio(path);\r\n        lightBtn(colorButtons[num]);\r\n        audio.load();\r\n        audio.play();\r\n        audio.onended = resolve;\r\n        audio.onerror = reject;\r\n    })\r\n}\r\n\r\n/**\r\n * @param {Number} n - Nonnegative integer\r\n * @returns {Array} - Array of pseudorandom nonnegative integers\r\n */\r\n function generateSequence(n) {\r\n     return createArray(n).map(() => getRandomInt(0, 4));\r\n }\r\n\r\n// Helper functions\r\n/**\r\n * Creates empty array if specified length\r\n * @param {Number} length - positive integer\r\n * @returns {Array}\r\n */\r\n function createArray(length) {\r\n     return [...new Array(length)];\r\n }\r\n\r\n/**\r\n * Returns a random number between 0 (inclusive) and 1 (exclusive)\r\n * @returns {Number} - Float number\r\n */\r\nfunction getRandom() {\r\n    return Math.random();\r\n}\r\n\r\n/**\r\n * Returns a random integer between min (included) and max (excluded)\r\n * @param {Number} min - Non-negative integer\r\n * @param {Number} max - Positive integer\r\n * @returns {Number} Non-negative integer\r\n */\r\nfunction getRandomInt(min, max) {\r\n    return Math.floor( (getRandom() * max - min) ) + min;\r\n}\r\n\r\n/** Sets a pause.\r\n * @param {Number} duration - Time in ms\r\n * @returns {Object} Promise that resolves after specified time\r\n */\r\nfunction sleep(duration)\r\n\t{\r\n\treturn(\r\n\t\tnew Promise(function(resolve)\r\n\t\t\t{\r\n\t\t\tsetTimeout(function() { resolve(); }, duration);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n/**\r\n * Returns the first key that has specified value\r\n * @param {Object} object\r\n * @param value\r\n * @returns {String|undefined} First key with specified value or undefined if\r\n * no key found\r\n */\r\nfunction getKeyByValue(object, value) {\r\n    return Object.keys(object).find(key => object[key] === value);\r\n}\r\n\r\n/**\r\n * Executes promises sequentially\r\n * @param {Array.<Object>} - Array of Promise returning functions.\r\n * @returns {Object} - Executing promise.\r\n */\r\nfunction executePromisesSeq(promises) {\r\n    let  result = Promise.resolve();\r\n\r\n    promises.forEach(function (prom) {\r\n        result = result.then(prom);\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Sets the text content of a node and its descendants.\r\n * @param {Object} element - DOM element object.\r\n * @param {String} text - Content to be set.\r\n */\r\nfunction setText(element, text) {\r\n    element.textContent = text;\r\n}\r\n\r\nfunction cloneNodesAndReplace() {\r\n    let colorBtns = document.querySelectorAll(\".color-btn\");\r\n    let clones = [...colorBtns].map( (el) => el.cloneNode() );\r\n    [...colorBtns].forEach( (el, idx) => {\r\n        el.parentNode.replaceChild(clones[idx], el);\r\n    });\r\n}\r\n\r\n/**\r\n * @param {String} classNames - Arbitrary number of class names.\r\n * @param {Object} element - Object of document.\r\n */\r\nfunction toggleClass(element, ...classNames) {\r\n    let classList = element.classList;\r\n    [...classNames].forEach( (el) => classList.toggle(el) );\r\n}\r\n"]}